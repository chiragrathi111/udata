Reset Password  Api and 1 Model class:-
=====================================

	@Override
	public GetTokenValidationResponseDocument getTokenValidation(int userId, String token) {
		GetTokenValidationResponseDocument getTokenValidationResponseDocument = GetTokenValidationResponseDocument.Factory.newInstance();
		GetTokenValidationResponse getTokenValidationResponse = getTokenValidationResponseDocument.addNewGetTokenValidationResponse();
//		GetTokenValidationRequest loginRequest = req.getGetTokenValidationRequest();
//		ADLoginRequest login = loginRequest.getADLoginRequest();
//		int userId = loginRequest.getUserId();
//		String token = loginRequest.getToken();
//		String serviceType = loginRequest.getServiceType();
		
		Trx trx = null;
		try {
			getCompiereService().connect();
			String trxName = Trx.createTrxName(getClass().getName() + "_");
			trx = Trx.get(trxName, true);
			trx.start();
//			String err = login(login, webServiceName, "addOrder", serviceType);
//			if (err != null && err.length() > 0) {
//				getTokenValidationResponse.setError(err);
//				getTokenValidationResponse.setIsError(true);
//				return getTokenValidationResponseDocument;
//			}
//			if (!serviceType.equalsIgnoreCase("addOrder")) {
//				getTokenValidationResponse.setError("Service type " + serviceType + " not configured");
//				getTokenValidationResponse.setIsError(true);
//				return getTokenValidationResponseDocument;
//			}
			TokenVerificationService tokenVerificationService = new TokenVerificationService();
		 	Boolean tokenValid = tokenVerificationService.verifyToken(userId, token);
		 	if(tokenValid) {
		 		getTokenValidationResponse.setTokenMessage("Token is Valid");
		 	}else {
		 		getTokenValidationResponse.setTokenMessage("Token is Invalid");
		 	}
		}catch (Exception e) {
			getTokenValidationResponse.setError(e.getMessage());
			getTokenValidationResponse.setIsError(true);
			}finally {
				trx.close();
				getCompiereService().disconnect();
			}
		return getTokenValidationResponseDocument;
	}

===============================================================

	@Override
	public GenerateTokenAndSendMailResponseDocument generateTokenAndSendMail(
			GenerateTokenAndSendMailRequestDocument req) {
		GenerateTokenAndSendMailResponseDocument generateTokenAndSendMailResponseDocument = GenerateTokenAndSendMailResponseDocument.Factory.newInstance();
		GenerateTokenAndSendMailResponse generateTokenAndSendMailResponse = generateTokenAndSendMailResponseDocument.addNewGenerateTokenAndSendMailResponse();
		GenerateTokenAndSendMailRequest loginRequest = req.getGenerateTokenAndSendMailRequest();
		 ADLoginRequest login = loginRequest.getADLoginRequest();
		 String serviceType = loginRequest.getServiceType();
		 String userName = loginRequest.getUserName();
		 PreparedStatement pstm = null;
		 int clientId = login.getClientID();
		ResultSet rs = null;
		 int userId = 0;	
		 int TOKEN_EXPIRATION_TIMES = 24 * 3600 * 1000; // 1 day in milliseconds
		 Trx trx = null;
		 try {
		 	getCompiereService().connect();
		 	CompiereService m_cs = getCompiereService();
			Properties ctx = m_cs.getCtx();
		 	String trxName = Trx.createTrxName(getClass().getName() + "_");
		 	trx = Trx.get(trxName, true);
		 	trx.start();
		 	String err = login(login, webServiceName, "addOrder", serviceType);
		 	if (err != null && err.length() > 0) {
		 		generateTokenAndSendMailResponse.setError(err);
		 		generateTokenAndSendMailResponse.setIsError(true);
		 		return generateTokenAndSendMailResponseDocument;
		 	}
		 	if (!serviceType.equalsIgnoreCase("addOrder")) {
		 		generateTokenAndSendMailResponse.setError("Service type " + serviceType + " not configured");
		 		generateTokenAndSendMailResponse.setIsError(true);
		 		return generateTokenAndSendMailResponseDocument;
		 	}
		 	String sql = "select ad_user_id As id from adempiere.ad_user\n"
		 			+ "where ad_client_id = "+clientId+" and name = '"+userName+"';";
		 	pstm = DB.prepareStatement(sql, null);
		 	rs = pstm.executeQuery();
		 	while(rs.next()) {
		 		 userId = rs.getInt("id");
		 	}
		 	if(userId == 0) {
		 		generateTokenAndSendMailResponse.setError("userName is not Valid, Please check userName "+userName);
		 		generateTokenAndSendMailResponse.setIsError(true);
		 		return generateTokenAndSendMailResponseDocument;	
		 	}
//User Reset Password using Token and send Email:-
		    MUser user = new MUser(ctx, userId, trx.getTrxName());
	        String token = generateToken();
//		    String token = "123456";
	        long expirationTime = System.currentTimeMillis() + TOKEN_EXPIRATION_TIMES;
	        Timestamp timestamp = new Timestamp(expirationTime);
	        
//	        sendEmail(user.getEMail(), token);
	        EmailService emailService = new EmailService();
	        emailService.sendEmail(user, token);
	        
	     // Save token and expiration to user record
	        String updateSQL = "UPDATE AD_User SET token=?, tokentime=? WHERE AD_User_ID=?";
	        DB.executeUpdate(updateSQL, new Object[]{token,timestamp, user.getAD_User_ID()}, false, null);
	        generateTokenAndSendMailResponse.setToken(token);
		 }catch (Exception e) {
			 e.printStackTrace();
			 generateTokenAndSendMailResponse.setError(e.getMessage());
			 generateTokenAndSendMailResponse.setIsError(true);
		 }finally {
		 	trx.close();
		 	getCompiereService().disconnect();
		 	DB.close(rs, pstm);
		 }
		return generateTokenAndSendMailResponseDocument;
	}

===============================================================

	@Override
	public UpdateUserPasswordResponseDocument updateUserPassword(UpdateUserPasswordRequestDocument req) {
		UpdateUserPasswordResponseDocument updateUserPasswordResponseDocument = UpdateUserPasswordResponseDocument.Factory.newInstance();
		UpdateUserPasswordResponse updateUserPasswordResponse = updateUserPasswordResponseDocument.addNewUpdateUserPasswordResponse();
		UpdateUserPasswordRequest loginRequest = req.getUpdateUserPasswordRequest();
		ADLoginRequest login = loginRequest.getADLoginRequest();
		String serviceType = loginRequest.getServiceType();
		String password = loginRequest.getPassword();
		String userName = loginRequest.getUserName();
		PreparedStatement pstm = null;
		int clientId = login.getClientID();
		ResultSet rs = null;
		int userId = 0;
		Trx trx = null;
		try {
		 	getCompiereService().connect();
		 	CompiereService m_cs = getCompiereService();
			Properties ctx = m_cs.getCtx();
		 	String trxName = Trx.createTrxName(getClass().getName() + "_");
		 	trx = Trx.get(trxName, true);
		 	trx.start();
		 	String err = login(login, webServiceName, "addOrder", serviceType);
		 	if (err != null && err.length() > 0) {
		 		updateUserPasswordResponse.setError(err);
		 		updateUserPasswordResponse.setIsError(true);
		 		return updateUserPasswordResponseDocument;
		 	}
		 	if (!serviceType.equalsIgnoreCase("addOrder")) {
		 		updateUserPasswordResponse.setError("Service type " + serviceType + " not configured");
		 		updateUserPasswordResponse.setIsError(true);
		 		return updateUserPasswordResponseDocument;
		 	}
		 	String sql = "select ad_user_id As id from adempiere.ad_user\n"
		 			+ "where ad_client_id = "+clientId+" and name = '"+userName+"';";
		 	pstm = DB.prepareStatement(sql, null);
		 	rs = pstm.executeQuery();
		 	while(rs.next()) {
		 		 userId = rs.getInt("id");
		 	}
		 	if(userId == 0) {
		 		updateUserPasswordResponse.setError("userName is not Valid, Please check userName "+userName);
		 		updateUserPasswordResponse.setIsError(true);
		 		return updateUserPasswordResponseDocument;	
		 	}
		 	MUser user = new MUser(ctx,userId,trx.getTrxName());
		 	user.setPassword(password);
		 	user.saveEx();
		 	trx.commit();
		 	updateUserPasswordResponse.setStatus("Password Update Successfully");
		 	updateUserPasswordResponse.setIsError(false);
		}catch (Exception e) {
			 e.printStackTrace();
			 updateUserPasswordResponse.setError(e.getMessage());
			 updateUserPasswordResponse.setIsError(true);
		}finally {
		 	trx.close();
		 	getCompiereService().disconnect();
		 	DB.close(rs, pstm);
		}
		return updateUserPasswordResponseDocument;
	}


	===============================================================

package org.realmeds.tissue.custom;

import java.sql.Timestamp;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import org.compiere.util.DB;

public class TokenVerificationService {

    public boolean verifyToken(int userId, String token) {
        String query = "SELECT token, tokentime FROM AD_User WHERE AD_User_ID=?";
        List<List<Object>> result = DB.getSQLArrayObjectsEx(null, query, new Object[]{userId});

        if (result.isEmpty()) {
            return false; // User not found
        }
        List<Object> userData = result.get(0);
        String storedToken = (String) userData.get(0);
        Object expirationObj = userData.get(1);
        long expirationTime;
        if (expirationObj instanceof Timestamp) {
            expirationTime = ((Timestamp) expirationObj).getTime();
        } else if (expirationObj instanceof String) {
            try {
            	DateTimeFormatter dateFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSSX");
                OffsetDateTime dateTime = OffsetDateTime.parse((String) expirationObj, dateFormat);
                expirationTime = dateTime.toInstant().toEpochMilli();
            } catch (Exception e) {
                e.printStackTrace();
                return false; // Parsing failed
            }
        } else {
            return false;
        }
        long currentTime = System.currentTimeMillis();
        if (!storedToken.equals(token) || currentTime > expirationTime) {
            return false; // Token is invalid or expired
        }
        return true; // Token is valid
    }
}